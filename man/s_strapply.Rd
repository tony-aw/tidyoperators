% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/s_strapply.R
\name{s_strapply}
\alias{s_strapply}
\title{s_strapply}
\usage{
s_strapply(x, fun, w = FALSE, clp = NULL, custom_sapply = NULL)
}
\arguments{
\item{x}{a string or character vector.}

\item{fun}{a function \strong{with a single argument} to be applied to the splitted string.}

\item{w}{logical; should each string in character vector \code{x} be splitted into space-delimited words (\code{w=T}),
or into single characters (w=F).}

\item{clp}{how should each string be pasted together? If NULL (Default),
the string is pasted together using \code{paste0(..., collapse="")} if \code{w=F},
and using \code{paste0(..., collapse=" ")} if \code{w=T}.}

\item{custom_sapply}{a function. \code{s_strapply()} internally uses \code{sapply}.
The user may choose to replace this with a custom sapply-like function,
usually for multi-threading purposes.\cr
\code{custom_sapply} must have the same argument convention
as \code{sapply}, or else use the arguments \code{x} and \code{fun}. \cr
For example: \cr
\code{plan(multisession)} \cr
\code{s_strapply(..., custom_sapply=future.apply::future_sapply)} \cr}
}
\value{
The \code{s_strapply()} function
generally returns a character vector of the same length as \code{x},
although this could depend on the function chosen for \code{fun}. \cr
\cr
}
\description{
The \code{s_strapply(x, fun, w=F, clp=NULL, custom_sapply=NULL)} function
applies the following steps to every element (every string) of character vector \code{x}: \cr
\enumerate{
\item the string is split into a vector of single characters (\code{w=F}),
or a vector of space-delimited words (\code{w=T}). \cr
\item the function \code{fun()} is applied to the vector from step 1. \cr
\item the result from step 2 is pasted together to form a single string element again,
using \code{paste0(..., collapse=clp)}. \cr
}

The point of this function is to increase the flexibility and usefulness
of the other string operators in this package.
}
\examples{
x <- c(paste0(letters[1:13], collapse=""), paste0(letters[14:26], collapse=""))
print(x)
# sort every string in reverse alphabetic order:
s_strapply(x, fun=\(x)sort(x, decreasing = TRUE))

# get which letter of the alphabet every character is:
s_strapply(x, fun=\(x)match(tolower(x), letters), clp=",")


# count
# get second-last vowel in every word:
x <- c("Outrageous, egregious, preposterous!", "Pleasant evening everyone")
print(x)
p <- s_pattern("a|e|i|o|u", ignore.case=TRUE)
s_strapply(x, w=TRUE, fun=\(x)s_extract(x, -2, p))

}
