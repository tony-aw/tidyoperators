% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/s_locate_ith.R
\name{s_locate_ith}
\alias{s_locate_ith}
\title{Locate the \eqn{i^{th}} occurrence of a pattern}
\usage{
s_locate_ith(x, i, p, custom_mapply = NULL)
}
\arguments{
\item{x}{a string or character vector.}

\item{i}{a number, or a numeric vector of the same length as \code{x}.
This gives the \eqn{i^{th}} instance to be replaced. \cr
Positive numbers are counting from the left. Negative numbers are counting from the right. I.e.: \cr
\code{s_locate_ith(x, i=1, p, rp)}
gives the position (range) of the first occurence of pattern \code{p}. \cr
\code{s_locate_ith(x, i=-1, p, rp)}
gives the position (range) of the last occurence of pattern \code{p}. \cr
\code{s_locate_ith(x, i=2, p, rp)}
gives the position (range) of the second occurence of pattern \code{p}. \cr
\code{s_locate_ith(x, i=1, p, rp)}
gives the position (range) of the second-last occurence of pattern \code{p}. \cr
If i is larger than the number of instances, the maximum instance will be given. \cr
For example: suppose a string has 3 instances of p; \cr
then if \code{i=4} the third instance will be located, \cr
and if \code{i=-3} the first instance will be located. \cr}

\item{p}{the result from either \code{s_pattern_b} or \code{s_pattern_stri}.
See \code{\link{s_pattern_b}}.}

\item{custom_mapply}{the \code{s_locate_ith()} function
internally use \code{mapply()}. The user may choose to replace this with a custom functions,
for example for multi-threading purposes. The replacing function must have the same argument convention
as \code{mapply}. \cr
For example:\cr
s_locate_ith(..., custom_mapply=future_mapply) \cr
NOTE: if you use \code{s_locate_ith()} inside an \code{s_strapply()} call,
and you want to replace the apply functions for multi-threading reasons,
I highly advise the user to only replace the \code{sapply} function in \code{s_strapply},
and to leave \code{mapply} inside \code{s_locate_ith()} without multi-threading: \cr
Running nested multi-threading processes may actually slow down the code, and may cause other problems also.
I.e. run this: \cr
\code{s_strapply(x, w=T, fun=\(x)s_locate_ith(x, -2, p), custom_sapply = future_sapply)} \cr
and not this: \cr
\code{s_strapply(x, w=T, fun=\(x)s_locate_ith(x, -2, p, custom_mapply=future_mapply), custom_sapply=future_sapply)} \cr}
}
\value{
An integer matrix with 3 columns: \cr
The first column gives the start position of the \eqn{i^{th}} occurence of pattern \code{p}. \cr
The second column gives the end position of the \eqn{i^{th}} occurence of pattern \code{p}. \cr
The third column gives the length of the position range of the \eqn{i^{th}} occurence of pattern \code{p}. \cr
}
\description{
This functions locates the \eqn{i^{th}} occurrence of a pattern in each string of
some character vector.
This is a helper function;
it's output can be used in the many string subsetting function to
extract, transform, replace, add-before, or add-after the \eqn{i^{th}} pattern. \cr
}
\examples{

# simple pattern ====

x <- paste0(1:10, collapse="")
print(x)
out <- lapply(1:10, \(i)s_locate_ith(x, i, as.character(i)))
out <- do.call(rbind, out)
cbind(1:10, out)

x <- paste0(1:10, collapse="")
print(x)
out <- lapply(1:10, \(i)s_locate_ith(x, -i, as.character(i)))
out <- do.call(rbind, out)
cbind(1:10, out)


x <- c(paste0(letters[1:13], collapse=""), paste0(letters[14:26], collapse=""))
print(x)
p <- "a|e|i|o|u" # same as p <- s_pattern_b("a|e|i|o|u", fixed=FALSE, ignore.case=FALSE, perl=FALSE)
out <- s_locate_ith(x, -1, p)
substr(x, out[,1], out[,2])


#############################################################################

# ignore case pattern ====

x <- c(paste0(letters[1:13], collapse=""), paste0(letters[14:26], collapse=""))
print(x)
# pattern with ignore.case=TRUE:
p <- s_pattern_b("A|E|I|O|U", fixed=FALSE, ignore.case=TRUE, perl=FALSE)
out <- s_locate_ith(x, c(1,-1), p)
substr(x, out[,1], out[,2])

#############################################################################

# multi-character pattern ====

x <- c(paste0(letters[1:13], collapse=""), paste0(letters[14:26], collapse=""))
print(x)
# multi-character pattern:
p <- s_pattern_b("AB", fixed=FALSE, ignore.case=TRUE, perl=FALSE)
out <- s_locate_ith(x, c(1, -1), p)
substr(x, out[,1], out[,2])

#############################################################################

p <- s_pattern_b("\\\\v+", perl=TRUE) # perl expression; only works with perl=TRUE
x <- c("line1 \n line2", "line1 \n line2")
print(x)
out <- s_locate_ith(x, c(1,-1), p)
substr(x, out[,1], out[,2])


}
